{"version":3,"sources":["refresh.js"],"names":["ctx","response","user","token","instance","meta","Error","AUTH_URL","id","console","log","resp","url","method","headers","json","data","user_key","error","message"],"mappings":";;;;;;AACA;;;;AACA;;;;;;2cAFA;;;;+BAGe,WAAMA,GAAN,EAAa;AAC1B,UAAM,EAACC,QAAD,KAAa,6BAAOD,GAAP,CAAnB;AACA,UAAM,EAACE,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA0BJ,IAAIK,IAApC;AACA,QAAI,CAACH,IAAL,EAAW;AACT,YAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;AACD;AACD,UAAMC,WAAW;AAAA,aACd,uCAAsCH,QAAS,UAASI,EAAG,aAD7C;AAAA,KAAjB;AAEAC,YAAQC,GAAR,CAAYR,IAAZ;AACA,QAAI;AACF,YAAMS,OAAO,MAAM,qBAAM;AACvBC,aAAKL,SAASL,KAAKM,EAAd,CADkB;AAEvBK,gBAAQ,MAFe;AAGvBC,iBAAS;AACP,0BAAgB,kBADT;AAEP,uBAAaX;AAFN;AAHc,OAAN,CAAnB;AAQA,aAAOF,SAASc,IAAT,CAAc;AACnBZ,eAAOQ,KAAKK,IAAL,CAAUC;AADE,OAAd,CAAP;AAGD,KAZD,CAYE,OAAOC,KAAP,EAAc;AACd,aAAOjB,SAASc,IAAT,CACL;AACEI,iBAAS;AADX,OADK,EAIL,GAJK,CAAP;AAMD;AACF,G","file":"refresh.js","sourcesContent":["/* global META, ARGS */\nimport fetch from 'axios'\nimport Server from 'syncano-server'\nexport default async ctx => {\n  const {response} = Server(ctx)\n  const {user, token, instance} = ctx.meta\n  if (!user) {\n    throw new Error('Please log in')\n  }\n  const AUTH_URL = id =>\n    `https://api.syncano.io/v2/instances/${instance}/users/${id}/reset_key/`\n  console.log(user)\n  try {\n    const resp = await fetch({\n      url: AUTH_URL(user.id),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-KEY': token\n      }\n    })\n    return response.json({\n      token: resp.data.user_key\n    })\n  } catch (error) {\n    return response.json(\n      {\n        message: 'Token is invalid'\n      },\n      403\n    )\n  }\n}\n"]}