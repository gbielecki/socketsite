{"version":3,"sources":["register.js"],"names":["ctx","data","users","socket","response","event","logger","instance","username","password","args","register","where","firstOrFail","then","respondWithUserAlreadyExists","catch","createUser","respondWithInvalidEmail","user","create","respondWithUser","respondWithError","res","json","id","token","user_key","err"],"mappings":";;;;;;AACA;;AACA;;;;;;AAFA;kBAGeA,OAAO;AACpB,QAAM,EAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,KAAhC,EAAuCC,MAAvC,EAA+CC,QAA/C,KAA2D,6BAAOP,GAAP,CAAjE;AACA,QAAM,EAACQ,QAAD,EAAWC,QAAX,KAAuBT,IAAIU,IAAjC;AACAC;AACA,WAASA,QAAT,GAAqB;AACnB,QAAI,sBAAQH,QAAR,CAAJ,EAAuB;AACrBN,YACGU,KADH,CACS,UADT,EACqB,IADrB,EAC2BJ,QAD3B,EAEGK,WAFH,GAGGC,IAHH,CAGQC,4BAHR,EAIGC,KAJH,CAISC,UAJT;AAKD,KAND,MAMO;AACL,aAAOC,yBAAP;AACD;;AAED,aAASD,UAAT,GAAuB;AACrB,YAAME,OAAO;AACXX,gBADW;AAEXC;AAFW,OAAb;;AAKAP,YAAMkB,MAAN,CAAaD,IAAb,EAAmBL,IAAnB,CAAwBO,eAAxB,EAAyCL,KAAzC,CAA+CM,gBAA/C;AACD;;AAED,aAASD,eAAT,CAA0BE,GAA1B,EAA+B;AAC7B,aAAOnB,SAASoB,IAAT,CAAc;AACnBC,YAAIF,IAAIE,EADW;AAEnBC,eAAOH,IAAII,QAFQ;AAGnBnB,kBAAUe,IAAIf;AAHK,OAAd,CAAP;AAKD;;AAED,aAASc,gBAAT,CAA2B,EAAClB,UAAUwB,GAAX,EAA3B,EAA4C;AAC1CA,UAAIJ,IAAJ,GAAWV,IAAX,CAAgBb,QAASG,SAASoB,IAAT,CAAcvB,IAAd,EAAoB,GAApB,CAAzB;AACD;;AAED,aAASc,4BAAT,GAAyC;AACvC,aAAOX,SAASoB,IAAT,CAAc,EAAChB,UAAU,sBAAX,EAAd,EAAkD,GAAlD,CAAP;AACD;;AAED,aAASU,uBAAT,GAAoC;AAClC,aAAOd,SAASoB,IAAT,CAAc,EAAChB,UAAU,yBAAX,EAAd,EAAqD,GAArD,CAAP;AACD;AACF;AACF,C","file":"register.js","sourcesContent":["/* global ARGS */\nimport {isEmail} from './helpers'\nimport Server from 'syncano-server'\nexport default ctx => {\n  const {data, users, socket, response, event, logger, instance} = Server(ctx)\n  const {username, password} = ctx.args\n  register()\n  function register () {\n    if (isEmail(username)) {\n      users\n        .where('username', 'eq', username)\n        .firstOrFail()\n        .then(respondWithUserAlreadyExists)\n        .catch(createUser)\n    } else {\n      return respondWithInvalidEmail()\n    }\n\n    function createUser () {\n      const user = {\n        username,\n        password\n      }\n\n      users.create(user).then(respondWithUser).catch(respondWithError)\n    }\n\n    function respondWithUser (res) {\n      return response.json({\n        id: res.id,\n        token: res.user_key,\n        username: res.username\n      })\n    }\n\n    function respondWithError ({response: err}) {\n      err.json().then(data =>  response.json(data, 400))\n    }\n\n    function respondWithUserAlreadyExists () {\n      return response.json({username: 'User already exists.'}, 400)\n    }\n\n    function respondWithInvalidEmail () {\n      return response.json({username: 'Given email is invalid.'}, 400)\n    }\n  }\n}\n"]}