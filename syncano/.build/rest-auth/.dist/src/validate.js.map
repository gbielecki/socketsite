{"version":3,"sources":["validate.js"],"names":["ctx","data","users","socket","response","event","logger","instance","username","token","args","u","where","firstOrFail","user_key","json","valid","error"],"mappings":";;;;;;AACA;;;;AACA;;;;;;2cAFA;;;;+BAGe,WAAMA,GAAN,EAAa;AAC1B,UAAM,EAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,KAAhC,EAAuCC,MAAvC,EAA+CC,QAA/C,KAA2D,6BAAOP,GAAP,CAAjE;AACA,UAAM,EAACQ,QAAD,EAAWC,KAAX,KAAoBT,IAAIU,IAA9B;AACA,QAAI;AACF,YAAMC,IAAI,MAAMT,MAAMU,KAAN,CAAY,UAAZ,EAAwBJ,QAAxB,EAAkCK,WAAlC,EAAhB;AACA,UAAIF,EAAEG,QAAF,KAAeL,KAAnB,EAA0B;AACxB,eAAOL,SAASW,IAAT,CAAc;AACnBC,iBAAO;AADY,SAAd,CAAP;AAGD;AACD,aAAOZ,SAASW,IAAT,CAAc;AACnBC,eAAO;AADY,OAAd,CAAP;AAGD,KAVD,CAUE,OAAOC,KAAP,EAAc;AACd,aAAOb,SAASW,IAAT,CAAcE,KAAd,CAAP;AACD;AACF,G","file":"validate.js","sourcesContent":["/* global META, ARGS */\nimport fetch from 'axios'\nimport Server from 'syncano-server'\nexport default async ctx => {\n  const {data, users, socket, response, event, logger, instance} = Server(ctx)\n  const {username, token} = ctx.args\n  try {\n    const u = await users.where('username', username).firstOrFail()\n    if (u.user_key !== token) {\n      return response.json({\n        valid: false\n      })\n    }\n    return response.json({\n      valid: true\n    })\n  } catch (error) {\n    return response.json(error)\n  }\n}\n"]}